const { exec } = require('child_process');
const wifi = require('./wifi');
const ap = require('./ap');
const path = require('path');

 
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}


(async () => {

  // üîÅ Activer temporairement NetworkManager
  const started = await wifi.startNetworks();
    
  // üîÅ Enable temporairement NetworkManager
  const enabled = await wifi.enableNetworks();

  // üîÅ attendre 1 √† 2 secondes (que l'interface Network soit bien d√©marr√©)
  console.log("‚úÖ Patienter quelques secondes du lancement de l'interface Network...");
  await sleep(5000);

  console.log("[üöÄ] D√©marrage du gestionnaire Wi-Fi...");
  const networks = await wifi.scanNetworks(); // faire le scan pendant que wlan0 est libre

  // Tenter de se connecter au Wi-Fi configur√©
  const connected = await wifi.connectToConfiguredWifi();

  if (connected != false) {
    console.log("[‚úÖ] Connexion Wi-Fi r√©ussie.");

    // On quitte le mode AP si actif
    exec('bash scripts/stop_ap.sh', (err) => {
      if (err) console.error("‚ö†Ô∏è Erreur lors de l'arr√™t de l'AP :", err.message);
    });

    // D√©marrer le serveur web connect√©
    ap.startHelloServer(ssid);

  } else {
    console.log("[‚ùå] √âchec de la connexion Wi-Fi. Passage en mode AP...");

    const networks = await wifi.scanNetworks(); // faire le scan pendant que wlan0 est libre

    // D√©marrage du mode AP via script bash
    exec('bash scripts/start_ap.sh', async (err) => {
      if (err) {
        console.error("‚ö†Ô∏è √âchec d√©marrage AP :", err.message);
        return;
      }

      // D√©marrage du serveur web en mode AP
      await ap.startAccessPoint(networks);
    });
  }
})();
